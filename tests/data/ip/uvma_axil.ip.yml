---
## Copyright 2021 Datum Technology Corporation
########################################################################################################################
## SPDX-License-Identifier: Apache-2.0 WITH SHL-2.1
########################################################################################################################


## README
# This is a prototype Moore.io IP Metadata file that describes a UVM Agent for AXI-Lite
# Many fields use glob (https://en.wikipedia.org/wiki/Glob_(programming)) patterns to describe directories/files


core:                                                                                              ### Every ip.yml file must include this block
   uid: ef15c1cc-2d1d-4fe6-b3c1-c9872ed1f221                                                       # string - Optional, unique catalog identifier for IP
   name: "uvma_axil"                                                                               # string - machine readable name for IP
   type: "verification-ip"                                                                         # enum - {rtl-ip, verification-ip, edapp}
   aliases:                                                                                        # list - Optional, other names for this ip (ex: in case it was renamed)
   full-name: "AXI-Lite UVM Agent"                                                                 # string - full IP name
   version: "0.0.1"                                                                                # string - version info (mio uses semver (https://semver.org/))
   release-date: 2021-03-28                                                                        # date - current release date
   description: >                                                                                  # string - IP catalog description
      UVM Agent for the AMBA Advanced eXtensible Interface protocol.                                
   keywords: [ "amba", "arm" ]                                                                     # list - strings to help find this IP in catalog searches
   catalog: "https://moore.io/ip/catalog"                                                          # string - Optional, URL to the catalog this IP is registered with
   suite: "mio-arm"                                                                                # string - Optional, IP suite identifier (useful for organizaing related IPs in the catalog)
   copyright-holders: ["Datum Technology Corporation"]                                             # list - name of orgs/persons  who hold copyright on described IP
   logo: "https://moore.io/assets/images/uvma_axil_logo.svg"                                       # string - Optional, URL of this IP's logo image for the IP catalog
   licenses: ["SHL-2.1"]                                                                           # list - licenses used by described IP
   private: False                                                                                  # boolean - is this IP visible to all?


verification-ip:                                                                                   ### Every VIP must include this block
   methodology: "uvm"                                                                              # string - Optional, for categorization
   type: "agent"                                                                                   # string - Optional, for categorization
   sub-type: "asymmetric"                                                                          # string - Optional, for categorization
   sub-sub-type: "half-duplex"                                                                     # string - Optional, for categorization
   block-diagram: "https://moore.io/assets/images/uvma_axil_block_diagram.svg"                     # string - Optional, URL of this VIP's top-level schematic
   languages:                                                                                      # list - HDL used in this package
      - { name: "system-verilog", version: "^" }                                                   # dictionary - this information will not likely be used at launch
   dependencies:                                                                                   # list - unordered, IPs on which this one depends for compilation
      - { name: "mio@uvm", version: "^1.2", notes: "" }                                            # dictionary - name includes catalog identifier, version is semver
      - { name: "mio@uvml_hrtbt", version: "^", notes: "" }                                        # ^^^
      - { name: "mio@uvml_logs", version: "^", notes: "" }                                         # ^^^
      - { name: "mio@uvml_trn", version: "^", notes: "" }                                          # ^^^
      - { name: "mio@uvml_reg", version: "^", notes: "" }                                          # ^^^
   simulators-supported:                                                                           # list - simulators on which this IP has been tested
      - { name: "xilinx", version: "2020.2", level: 100, notes: "" }                               # dictionary - level is a tbd metric
      - { name: "xilinx", version: "2019.2", level:  75, notes: "" }                               # 


community:                                                                                         ### Optional, catalog information about who worked on this IP (heavily borrowed from npm)
   contributors:                                                                                   # list - IP authors
      - {                                                                                          # dictionary - This is fairly open-ended
         name: "David Poulin",                                                                     # string - 
         org: "Datum Technology Corporation",                                                      # string - 
         email: "dpoulin@datumtc.ca",                                                              # string - email
         linked-in: "https://www.linkedin.com/in/david-poulin-24674734/"                           # string - URL
      }
   home-page: "https://github.com/Datum-Technology-Corporation/mio_arm/projects/1"                 # string - URL
   repository:                                                                                     # dictionary - non-funtional information
      type: "git"                                                                                  # string - 
      url: "https://github.com/Datum-Technology-Corporation/mio_arm"                               # string - 
   bugs:                                                                                           # dictionary - non-functional information
      url: "https://github.com/Datum-Technology-Corporation/mio_arm/issues"                        # string - URL
      email: "bugs@moore.io"                                                                       # string - email
   funding:                                                                                        # dictionary - info for supporting the IP
      type: ""                                                                                     # string - 
      url: ""                                                                                      # string - URL


structure:                                                                                         ### Every IP must include this block. All paths are relative to the IP's root directory
   scripts-paths: [ "/bin" ]                                                                       # list - glob's describing directories were IP python scripts can be found
   docs-paths: [ "/docs" ]                                                                         # list - glob's describing directories were IP documents can be found
   examples-paths: [ "/examples" ]                                                                 # list - glob's describing directories were IP code samples can be found
   src-paths: [ "/src" ]                                                                           # list - glob's describing directories were IP source code can be found


hdl-src:                                                                                           ### "Hardware Description Language Source" - Every IP/VIP must include this block - paths relative to src-paths
   files: ["/*/*.sv"]                                                                              # list - glob's describing the locations of hdl source code file(s).
   top-files: [ "/uvma_axil_pkg.sv" ]                                                              # list - glob's describing the locations of the top-level hdl source code file(s).
   top-constructs:                                                                                 # list - glob's describing the locations of the top-level hdl construct(s) for the IP.
   tests-paths: [ "/ut" ]                                                                          # list - glob's describing the locations of unit tests.
   tests-name-template: "uvma_axil_{{ name }}_test_c"                                              # string - jinja2 template specifying how to match a test name (ex: in regression) to the actual construct name
   compilation-arguments: ["+define+UVM_MAX_PACK_BYTES=65_536"]                                    # list - static compilation arguments
   elaboration-arguments:                                                                          # list - static elaboration arguments
   simulation-arguments : ["+SIM_ARG=123"]                                                         # list - static simulation arguments


doc-gen:                                                                                           ### Optional - Documentation Generation - Recommended for all IPs
   docs: ["/*/*.rst"]                                                                              # string - glob for docs to include in reference documentation (reStructuredText)
   markup-style: doxygen                                                                           # enum - {doxygen, naturaldocs, all} what type of comment markups to parse
   # MORE TBD


events:                                                                                            ### List of events and corresponding listeners (python3 scripts or python3 literals)
                                                                                                   ### This is not an exhaustive list
   pre-git-pull:                                                                                   # 
   post-git-pull:                                                                                  # 
      - 'mio::refactor::disconnect_rtl_ports_in_files("*/*")'                                      # python3 literal (disconnecting rtl ports in the same way as verilog autos)
      - 'mio::refactor::connect_rtl_ports_in_files("*/*")'                                         # ^^^
   pre-init:                                                                                       # 
   post-init:                                                                                      # 
   pre-library:                                                                                    # 
   post-library:                                                                                   # 
   pre-compilation:                                                                                # 
   post-compilation:                                                                               # 
   pre-elaboration:                                                                                # 
   post-elaboration:                                                                               # 
   pre-simulation:                                                                                 # 
   post-simulation:                                                                                # 
   pre-results-processing:                                                                         # 
   post-results-processing:                                                                        # 
   pre-results-upload:                                                                             # 
   post-results-upload:                                                                            # 
   pre-shutdown:                                                                                   # 
   pre-git-commit: [ 'pre-commit.py' ]                                                             # python3 script - mio will search scripts-paths for these
   post-git-commit:                                                                                # 


parameters:                                                                                        ### IP parameters have their own section - this is a list of parameter descriptors
  - {                                                                                              # dictionary - parameter descriptor - integer example
     name: "max-data-width",                                                                       # string - 
     full-name: "Maximum Data Width"                                                               # string - 
     type: "integer",                                                                              # enum
     min: 8,                                                                                       # number - 
     max: 128,                                                                                     # number - 
     cli-str:                                                                                      # list - phase and its cli argument for this parameter
        - compilation: "+define+UVMA_AXIL_MAX_DATA_WIDTH={{ val }}",                               # string - jinja2 template
     default: 32                                                                                   # number - 
  }                                                                                                # 
  - {                                                                                              # 
     name: "protocol-version",                                                                     # 
     full-name: "Protocol Version"                                                                 # string - 
     type: "string",                                                                               # 
     cli-str:                                                                                      # list - phase and its cli argument for this parameter
        - simulation: "+UVMA_AXIL_FORCE_PROTOCOL_VERSION={{ val }}",                               # string - jinja2 template
     default: "v1.4"                                                                               # 
  }                                                                                                # 
  - {                                                                                              # 
     name: "include-if-checker",                                                                   # 
     type: "boolean",                                                                              # 
     cli-str:                                                                                      # list - phase and its cli argument for this parameter
        - compilation: "+define+UVMA_AXIL_INC_IF_CHKR",                                            # string - jinja2 template
     default: False                                                                                # 
  }
  - {                                                                                              # 
     name: "sample-list",                                                                          # 
     type: "list",                                                                                 # 
     cli-str:                                                                                      # list - phase and its cli argument for this parameter
        - simulation: "+MY_LIST={% for i in val %}{{ i }},{% endfor %}",                           # string - jinja2 template
     default: []                                                                                   # list - 
  }
   git-pull:                                                                                       # 
   init:                                                                                           # 
   library:                                                                                        # 
   compilation:                                                                                    #                                                                                        # 
   elaboration:                                                                                    # 
   simulation:                                                                                     # 
   results-processing:                                                                             # 
   results-upload:                                                                                 # 
   shutdown:                                                                                       # 


configuration :                                                                                    ### Static data dictionary for IP
   # data store for the IP                                                                         # 


template-metadata:                                                                                 ### Static data dictionary for template/generator that created this IP
   name: ""                                                                                        # string - name of template/generator
   url: ""                                                                                         # string - URL
   input-parameters: null                                                                          # dictionary - parameters from user used by generator
